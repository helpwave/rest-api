// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/er": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emergency-rooms"
                ],
                "summary": "get emergency rooms",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "0-indexed page number, 0 is assumed when omitted",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.GetMultipleERsResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPErrorResponse"
                        }
                    }
                }
            }
        },
        "/er/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emergency-rooms"
                ],
                "summary": "get an emergency room by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency Room's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.GetSingleERResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emergency-rooms"
                ],
                "summary": "create a new emergency room",
                "parameters": [
                    {
                        "description": "ER to add",
                        "name": "emergency-room",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.PutERRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.PutERResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emergency-rooms"
                ],
                "summary": "delete an emergency room by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency Room's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.StatusResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "emergency-rooms"
                ],
                "summary": "update an emergency room by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Emergency Room's ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.GetSingleERResponse"
                        }
                    },
                    "501": {
                        "description": "Not Implemented",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "can be used for health checks",
                "summary": "health check route",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/routes.HealthzResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/routes.HealthzResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Department": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "neededInEmergencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Emergency"
                    }
                },
                "rooms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.EmergencyRoom"
                    }
                }
            }
        },
        "models.Emergency": {
            "type": "object",
            "properties": {
                "emergencyRoom": {
                    "$ref": "#/definitions/models.EmergencyRoom"
                },
                "emergencyRoomID": {
                    "description": "explicitly set the FK to NULL, else PG is confused",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "neededDepartments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Department"
                    }
                },
                "startLoc": {
                    "$ref": "#/definitions/models.Point"
                },
                "timeStamp": {
                    "type": "string"
                }
            }
        },
        "models.EmergencyRoom": {
            "type": "object",
            "properties": {
                "departments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Department"
                    }
                },
                "displayableAddress": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.Point"
                },
                "name": {
                    "type": "string"
                },
                "open": {
                    "type": "boolean"
                },
                "utilization": {
                    "type": "integer"
                }
            }
        },
        "models.Point": {
            "type": "object",
            "properties": {
                "x": {
                    "type": "number"
                }
            }
        },
        "routes.GetMultipleERsResponse": {
            "type": "object",
            "properties": {
                "lastPage": {
                    "type": "boolean"
                },
                "numPages": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "pageSize": {
                    "type": "integer"
                },
                "totalSite": {
                    "type": "integer"
                }
            }
        },
        "routes.GetSingleERResponse": {
            "type": "object"
        },
        "routes.HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "routes.HTTPErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "$ref": "#/definitions/routes.HTTPError"
                }
            }
        },
        "routes.HealthzResponse": {
            "type": "object",
            "properties": {
                "server": {
                    "type": "string"
                }
            }
        },
        "routes.PutERRequest": {
            "type": "object",
            "properties": {
                "departments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Department"
                    }
                },
                "displayableAddress": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.Point"
                },
                "name": {
                    "type": "string"
                },
                "open": {
                    "type": "boolean"
                },
                "utilization": {
                    "type": "integer"
                }
            }
        },
        "routes.PutERResponse": {
            "type": "object"
        },
        "routes.StatusResponse": {
            "type": "object",
            "properties": {
                "ok": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
