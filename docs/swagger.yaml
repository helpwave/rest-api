definitions:
  models.DepartmentBase:
    properties:
      id:
        type: string
      name:
        example: pediatric surgery
        type: string
    type: object
  models.Point:
    properties:
      lat:
        example: 51.9893434
        type: number
      long:
        example: 7.62613583
        type: number
    required:
    - lat
    - long
    type: object
  routes.CreateDepartmentRequest:
    properties:
      name:
        example: pediatric surgery
        type: string
    required:
    - name
    type: object
  routes.CreateOrgRequest:
    properties:
      contactEmail:
        example: example@helpwave.de
        type: string
      longName:
        example: Uniklinikum Münster
        type: string
      shortName:
        example: UKM
        type: string
    required:
    - contactEmail
    - longName
    type: object
  routes.CreateUserRequest:
    properties:
      admin:
        type: boolean
      email:
        example: example@helpwave.de
        type: string
      fullName:
        example: Some Name
        type: string
      organization:
        type: string
      password:
        example: hunter2
        maxLength: 100
        minLength: 6
        type: string
    required:
    - email
    - fullName
    - password
    type: object
  routes.CreateUserResponse:
    properties:
      userID:
        type: string
    type: object
  routes.GetDepartmentsResponse:
    properties:
      departments:
        items:
          $ref: '#/definitions/models.DepartmentBase'
        type: array
      lastPage:
        type: boolean
      page:
        type: integer
      pageSize:
        type: integer
      totalSize:
        type: integer
    type: object
  routes.GetMultipleERsResponse:
    properties:
      emergencyRooms:
        items:
          type: string
        type: array
      lastPage:
        type: boolean
      page:
        type: integer
      pageSize:
        type: integer
      totalSize:
        type: integer
    type: object
  routes.GetSingleERResponse:
    properties:
      departments:
        items:
          $ref: '#/definitions/models.DepartmentBase'
        type: array
      displayableAddress:
        example: Kardinal-von-Galen-Ring 10, 48149 Münster, Germany
        type: string
      id:
        type: string
      location:
        $ref: '#/definitions/models.Point'
      name:
        example: Uniklinikum Münster
        type: string
      open:
        type: boolean
      utilization:
        example: 4
        type: integer
    required:
    - displayableAddress
    - location
    - name
    type: object
  routes.GetSingleOrgResponse:
    properties:
      avatarUrl:
        type: string
      contactEmail:
        type: string
      id:
        type: string
      longName:
        type: string
      shortName:
        type: string
    type: object
  routes.HTTPError:
    properties:
      code:
        example: 500
        type: integer
      message:
        example: Some complicated error message here
        type: string
    type: object
  routes.HTTPErrorResponse:
    properties:
      error:
        $ref: '#/definitions/routes.HTTPError'
    type: object
  routes.HealthzResponse:
    properties:
      server:
        type: string
    type: object
  routes.PutERRequest:
    properties:
      departments:
        items:
          type: string
        type: array
      displayableAddress:
        example: Kardinal-von-Galen-Ring 10, 48149 Münster, Germany
        type: string
      location:
        $ref: '#/definitions/models.Point'
      name:
        example: Uniklinikum Münster
        type: string
      open:
        type: boolean
      utilization:
        example: 4
        type: integer
    required:
    - displayableAddress
    - location
    - name
    type: object
  routes.SingleDepartmentResponse:
    properties:
      id:
        type: string
      name:
        example: pediatric surgery
        type: string
    type: object
  routes.UpdateDepartmentRequest:
    properties:
      name:
        example: pediatric surgery
        type: string
    type: object
info:
  contact: {}
paths:
  /departments:
    get:
      parameters:
      - description: 0-indexed page number, 0 is assumed when omitted
        in: query
        name: page
        type: integer
      - description: page size, 100 is assumed when omitted
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.GetDepartmentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: get all departments
      tags:
      - departments
    put:
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: Dep. to add
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/routes.CreateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.SingleDepartmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: create new department
      tags:
      - departments
  /departments/{id}:
    delete:
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: department id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: delete a department
      tags:
      - departments
    patch:
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: Department's ID
        in: path
        name: id
        required: true
        type: string
      - description: ER to update
        in: body
        name: department
        required: true
        schema:
          $ref: '#/definitions/routes.UpdateDepartmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: update an department by id
      tags:
      - departments
  /emergency-room:
    get:
      parameters:
      - description: 0-indexed page number, 0 is assumed when omitted
        in: query
        name: page
        type: integer
      - description: page size, 100 is assumed when omitted
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.GetMultipleERsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: get all emergency rooms
      tags:
      - emergency-rooms
    put:
      consumes:
      - application/json
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: ER to add
        in: body
        name: emergency-room
        required: true
        schema:
          $ref: '#/definitions/routes.PutERRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.GetSingleERResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: create a new emergency room
      tags:
      - emergency-rooms
  /emergency-room/{id}:
    delete:
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: Emergency Room's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: delete an emergency room by id
      tags:
      - emergency-rooms
    get:
      parameters:
      - description: Emergency Room's ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.GetSingleERResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: get an emergency room by id
      tags:
      - emergency-rooms
    patch:
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: Emergency Room's ID
        in: path
        name: id
        required: true
        type: string
      - description: ER to update
        in: body
        name: emergency-room
        required: true
        schema:
          $ref: '#/definitions/routes.PutERRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: update an emergency room by id
      tags:
      - emergency-rooms
  /healthz:
    get:
      description: can be used for health checks
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.HealthzResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/routes.HealthzResponse'
      summary: health check route
  /organizations:
    put:
      consumes:
      - application/json
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: Org to add
        in: body
        name: organization
        required: true
        schema:
          $ref: '#/definitions/routes.CreateOrgRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.GetSingleOrgResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: create a new organization
      tags:
      - organizations
  /users:
    put:
      consumes:
      - application/json
      parameters:
      - description: 'Bearer: <TOKEN>'
        in: header
        name: authorization
        required: true
        type: string
      - description: user to add
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/routes.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/routes.HTTPErrorResponse'
      summary: create a new user
      tags:
      - users
  /version:
    get:
      description: return the version
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: version route
swagger: "2.0"
